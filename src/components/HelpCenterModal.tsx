import React, { useState, useEffect } from 'react';
import { 
  X, 
  Search, 
  BookOpen, 
  Video, 
  FileText, 
  ChevronRight,
  ArrowLeft,
  ExternalLink,
  HelpCircle
} from 'lucide-react';
import { supabase } from '../lib/supabase';
import ReactMarkdown from 'react-markdown';

interface HelpItem {
  id: string;
  title: string;
  description: string | null;
  type: 'text' | 'video' | 'pdf';
  content: string | null;
  file_url: string | null;
  file_name: string | null;
  category: string;
}

interface HelpCenterModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const HelpCenterModal: React.FC<HelpCenterModalProps> = ({ isOpen, onClose }) => {
  const [helpItems, setHelpItems] = useState<HelpItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedItem, setSelectedItem] = useState<HelpItem | null>(null);
  const [view, setView] = useState<'list' | 'detail'>('list');
  const [videoError, setVideoError] = useState<string | null>(null);
  const [pdfError, setPdfError] = useState<string | null>(null);

  const categories = [
    { value: 'getting-started', label: 'Getting Started' },
    { value: 'faq', label: 'FAQ' }
  ];

  useEffect(() => {
    if (isOpen) {
      fetchHelpItems();
    }
  }, [isOpen]);

  const fetchHelpItems = async () => {
    try {
      const { data, error } = await supabase
        .from('help_center')
        .select('*')
        .eq('is_active', true)
        .order('category')
        .order('created_at');

      if (error) throw error;
      setHelpItems(data || []);
    } catch (error) {
      console.error('Error fetching help items:', error);
      // Set demo data if database fails
      setHelpItems([
        {
          id: '1',
          title: 'Getting Started with Trade4me',
          description: 'Learn how to get started with the Trade4me platform',
          type: 'text',
          content: '# Getting Started with Trade4me\n\nWelcome to Trade4me! This guide will help you get started with our platform and make the most of your trading experience.\n\n## What is Trade4me?\n\nTrade4me is a professional crypto trading strategy platform that allows you to follow institutional-grade trading strategies. Our flagship strategy, Trade4me 500+, is designed to generate consistent returns by capitalizing on small trend movements in the BTC and ETH markets.\n\n## How to Get Started\n\n1. **Create a Phemex Account**: Sign up on Phemex Exchange using our exclusive partner link.\n2. **Deposit Funds**: Deposit a minimum of 500 USDC to your Phemex account.\n3. **Follow the Strategy**: Navigate to copy trading and follow the Trade4me 500+ strategy.\n\n## Key Features\n\n- **Institutional-Grade Performance**: Access the same trading strategies used by professional investors.\n- **Automated Execution**: The system trades 24/7 without requiring your intervention.\n- **Verified Performance**: All performance metrics are transparent and verified.\n- **Risk Management**: Advanced risk management protocols protect your capital.\n\n## Need Help?\n\nIf you have any questions or need assistance, please don\'t hesitate to contact our support team at support@connectx-consulting.com.',
          file_url: null,
          file_name: null,
          category: 'getting-started'
        },
        {
          id: '2',
          title: 'Understanding Trade4me Fees',
          description: 'Learn about the fee structure for Trade4me services',
          type: 'text',
          content: '# Understanding Trade4me Fees\n\nThis guide explains the fee structure for Trade4me services.\n\n## Fee Structure\n\nTrade4me operates on a performance-based fee model:\n\n- **Base Fee**: None. There is no upfront cost to follow the strategy.\n- **Performance Fee**: 2% of profits generated by the strategy.\n- **Exchange Fees**: Standard Phemex Exchange trading fees apply.\n\n## Rebates and Discounts\n\nAs a Trade4me user, you benefit from:\n\n- **Reduced Exchange Fees**: Special rates negotiated with Phemex.\n- **Referral Bonuses**: Earn when you refer new users to the platform.\n- **Volume Discounts**: Reduced fees for larger trading volumes.\n\n## Billing Cycle\n\nPerformance fees are calculated and charged monthly based on the profits generated during that period. You will receive a detailed statement showing your trading performance and applicable fees.\n\n## Questions?\n\nIf you have any questions about our fee structure, please contact our support team at support@connectx-consulting.com.',
          file_url: null,
          file_name: null,
          category: 'earnings'
        },
        {
          id: '3',
          title: 'Trade4me Security Measures',
          description: 'Learn about the security features of the Trade4me platform',
          type: 'text',
          content: '# Trade4me Security Measures\n\nAt Trade4me, we take security seriously. This guide outlines the security measures we have in place to protect your funds and data.\n\n## Account Security\n\n- **Two-Factor Authentication (2FA)**: We strongly recommend enabling 2FA on your Phemex account.\n- **Email Verification**: All accounts require email verification.\n- **IP Monitoring**: Suspicious login attempts are flagged and may require additional verification.\n\n## Fund Security\n\n- **No Direct Access**: Trade4me never has direct access to your funds. All trading is done through Phemex\'s secure API.\n- **Limited Permissions**: The trading API only has permission to execute trades, not withdraw funds.\n- **Risk Management**: Our algorithms include built-in risk management to protect your capital.\n\n## Data Protection\n\n- **Encryption**: All data is encrypted in transit and at rest.\n- **Privacy Policy**: We adhere to strict data protection standards.\n- **Regular Audits**: Our systems undergo regular security audits.\n\n## Best Practices\n\n1. Use a strong, unique password for your Phemex account.\n2. Enable 2FA for an additional layer of security.\n3. Be cautious of phishing attempts - always verify the website URL.\n4. Keep your API keys secure and never share them.\n\n## Questions?\n\nIf you have any security concerns, please contact our security team immediately at security@connectx-consulting.com.',
          file_url: null,
          file_name: null,
          category: 'security'
        }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const handleItemClick = (item: HelpItem) => {
    setSelectedItem(item);
    setView('detail');
    setVideoError(null);
    setPdfError(null);
  };

  const backToList = () => {
    setSelectedItem(null);
    setView('list');
    setVideoError(null);
    setPdfError(null);
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'text':
        return BookOpen;
      case 'video':
        return Video;
      case 'pdf':
        return FileText;
      default:
        return BookOpen;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'text':
        return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      case 'video':
        return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'pdf':
        return 'bg-green-500/20 text-green-400 border-green-500/30';
      default:
        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const getCategoryLabel = (category: string) => {
    const categoryObj = categories.find(c => c.value === category);
    return categoryObj?.label || category;
  };

  const filteredItems = helpItems.filter(item => {
    const matchesCategory = selectedCategory === 'all' || item.category === selectedCategory;
    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.description?.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesCategory && matchesSearch;
  });

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center">
              <HelpCircle className="w-5 h-5 text-blue-400" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-white">Help Center</h2>
              <p className="text-sm text-gray-400">Find answers to your questions</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 text-gray-400 hover:text-white transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Content */}
        <div className="h-[70vh] overflow-y-auto">
          {view === 'list' ? (
            <div className="p-6">
              {/* Search and Filters */}
              <div className="mb-6">
                <div className="relative mb-4">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    placeholder="Search help center..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <div className="flex flex-wrap gap-2">
                  <button
                    onClick={() => setSelectedCategory('all')}
                    className={`px-3 py-1 rounded-full text-sm ${
                      selectedCategory === 'all'
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                    } transition-colors`}
                  >
                    All
                  </button>
                  {categories.map(category => (
                    <button
                      key={category.value}
                      onClick={() => setSelectedCategory(category.value)}
                      className={`px-3 py-1 rounded-full text-sm ${
                        selectedCategory === category.value
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      } transition-colors`}
                    >
                      {category.label}
                    </button>
                  ))}
                </div>
              </div>

              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredItems.map((item) => {
                    const TypeIcon = getTypeIcon(item.type);
                    
                    return (
                      <button
                        key={item.id}
                        onClick={() => handleItemClick(item)}
                        className="w-full flex items-start gap-4 p-4 bg-gray-700/30 rounded-lg hover:bg-gray-700/50 transition-colors text-left"
                      >
                        <div className={`w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0 ${
                          item.type === 'text' ? 'bg-blue-500/20' :
                          item.type === 'video' ? 'bg-red-500/20' :
                          'bg-green-500/20'
                        }`}>
                          <TypeIcon className={`w-5 h-5 ${
                            item.type === 'text' ? 'text-blue-400' :
                            item.type === 'video' ? 'text-red-400' :
                            'text-green-400'
                          }`} />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h3 className="text-white font-medium">{item.title}</h3>
                            <ChevronRight className="w-4 h-4 text-gray-400" />
                          </div>
                          {item.description && (
                            <p className="text-gray-400 text-sm mt-1">{item.description}</p>
                          )}
                        </div>
                      </button>
                    );
                  })}

                  {filteredItems.length === 0 && (
                    <div className="text-center py-12">
                      <HelpCircle className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                      <h4 className="text-lg font-semibold text-gray-400 mb-2">No Results Found</h4>
                      <p className="text-gray-500">
                        {searchTerm || selectedCategory !== 'all'
                          ? 'Try adjusting your search or filters.'
                          : 'No help items available yet.'
                        }
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>
          ) : (
            <div className="p-6">
              {selectedItem && (
                <>
                  <button
                    onClick={backToList}
                    className="flex items-center gap-2 text-blue-400 hover:text-blue-300 transition-colors mb-6"
                  >
                    <ArrowLeft className="w-4 h-4" />
                    Back to Help Center
                  </button>
                  
                  <div className="mb-6">
                    <div className="flex items-center gap-3 mb-4">
                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                        selectedItem.type === 'text' ? 'bg-blue-500/20' :
                        selectedItem.type === 'video' ? 'bg-red-500/20' :
                        'bg-green-500/20'
                      }`}>
                        {React.createElement(getTypeIcon(selectedItem.type), {
                          className: `w-5 h-5 ${
                            selectedItem.type === 'text' ? 'text-blue-400' :
                            selectedItem.type === 'video' ? 'text-red-400' :
                            'text-green-400'
                          }`
                        })}
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-white">{selectedItem.title}</h3>
                        <div className="flex items-center gap-2 mt-1">
                          <span className={`px-2 py-0.5 rounded text-xs ${getTypeColor(selectedItem.type)}`}>
                            {selectedItem.type.charAt(0).toUpperCase() + selectedItem.type.slice(1)}
                          </span>
                          <span className="text-gray-500 text-xs">
                            {getCategoryLabel(selectedItem.category)}
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    {selectedItem.description && (
                      <p className="text-gray-300 mb-6">{selectedItem.description}</p>
                    )}
                  </div>
                  
                  {selectedItem.type === 'text' && selectedItem.content ? (
                    <div className="prose prose-invert max-w-none">
                      <ReactMarkdown>
                        {selectedItem.content}
                      </ReactMarkdown>
                    </div>
                  ) : selectedItem.type === 'video' && selectedItem.file_url ? (
                    <div className="aspect-video bg-black rounded-lg overflow-hidden">
                      {videoError ? (
                        <div className="flex flex-col items-center justify-center h-full p-6 bg-gray-800">
                          <Video className="w-16 h-16 text-red-400 mb-4" />
                          <h4 className="text-lg font-semibold text-white mb-2">Video Error</h4>
                          <p className="text-gray-400 text-center mb-4">{videoError}</p>
                          <button
                            onClick={() => setVideoError(null)}
                            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                          >
                            Try Again
                          </button>
                        </div>
                      ) : (
                        <video 
                          controls 
                          className="w-full h-full"
                          onError={(e) => {
                            console.error('Video error:', e);
                            setVideoError('Unable to play this video. The file may be corrupted or in an unsupported format.');
                          }}
                        >
                          <source src={selectedItem.file_url} type="video/mp4" />
                          <source src={selectedItem.file_url} type="video/webm" />
                          <source src={selectedItem.file_url} type="video/quicktime" />
                          Your browser does not support the video tag.
                        </video>
                      )}
                    </div>
                  ) : selectedItem.type === 'pdf' && selectedItem.file_url ? (
                    <div className="h-[60vh] bg-gray-900 rounded-lg overflow-hidden">
                      {pdfError ? (
                        <div className="flex flex-col items-center justify-center h-full p-6">
                          <FileText className="w-16 h-16 text-red-400 mb-4" />
                          <h4 className="text-lg font-semibold text-white mb-2">PDF Error</h4>
                          <p className="text-gray-400 text-center mb-4">{pdfError}</p>
                          <button
                            onClick={() => setPdfError(null)}
                            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                          >
                            Try Again
                          </button>
                        </div>
                      ) : (
                        <iframe
                          src={selectedItem.file_url}
                          className="w-full h-full border-0"
                          title={selectedItem.title}
                          onError={() => setPdfError('Unable to display this PDF. The file may be corrupted or in an unsupported format.')}
                        />
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <p className="text-gray-400">Content not available</p>
                    </div>
                  )}
                </>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default HelpCenterModal;